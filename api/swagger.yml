openapi: 3.0.3
info:
  title: Swagger API Docs - OpenAPI 3.0
  description: Описание
  license:
    name: MIT
    url: https://mit-license.org/
  version: 1.0.11
servers:
  - url: http://localhost:8000/api/v1
tags:
  - name: User
    description: User operations
paths:
  /user:
    get:
      tags:
        - User
      summary: Get user by UUID
      description: ''
      operationId: GetUserByUUID
      parameters:
        - name: uuid
          in: query
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    post:
      tags:
        - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUser'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
    put:
      tags:
        - User
      summary: Update user by UUID
      description: This can only be done by the logged in user.
      operationId: updateUserByUUID
      parameters:
        - name: uuid
          in: query
          description: name that need to be deleted
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUser'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
    delete:
      tags:
        - User
      summary: Delete user by UUID
      description: This can only be done by the logged in user.
      operationId: DeleteUserByUUID
      parameters:
        - name: uuid
          in: query
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    RequestUser:
      type: object
      properties:
        full_name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "89855556575"
      xml:
        name: user
    ResponseUser:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
          example: "57ebdf11-5ccf-4cae-b2d1-da513894202a"
        full_name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: '89855556575'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      xml:
        name: user
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RequestUser'
